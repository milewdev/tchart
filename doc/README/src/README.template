### Overview

tchart is a command line utility that generates [TikZ](http://sourceforge.net/projects/pgf/) code to draw a chart of date-based data.

For example, a file containing:

```
@include overview.txt
```

will result in:

![overview.jpg](doc/README/overview.jpg)



<br>
### Installation (OS X)

*TODO: $ gem install tchart*

*TODO: prerequisites: Ruby and (e.g.) MacTeX*



<br>
### Quick Start

1.  Using your favourite editor, create a plain text file, skills.txt, containing some date-based data:

    ```
    @include ../skills.txt
    ```

2.  Run tchart to read skills.txt and write generated TikZ code to skills.tikz:

    ```
    $ tchart skills.txt skills.tikz
    ```

3.  The generated TikZ code references a style name we specified in skills.txt ('lang'), as well as styles for the x-axis 
    labels ('xlabel'), the y-axis labels ('ylabel'), and the chart grid lines ('gridline').  Create a TeX document,
    styles.tikz, that defines these styles:
    
    ```
    @include ../styles.tikz
    ```
    
    See [pgfmanual.pdf](http://mirrors.ctan.org/graphics/pgf/base/doc/generic/pgf/pgfmanual.pdf) for more information
    on TikZ and styles (e.g. sections 2.8, 12.4.2, and 55.4.4).
    
4.  Create a main TeX document, skills.tex, that includes the TikZ library, our styles.tikz file, and the generated 
    skills.tikz file:
    
    ```
    @include ../skills.tex
    ```

5.  Generate a PDF file from our main TeX document:

    ```
    $ pdftex -interaction=batchmode skills.tex
    ```
    
    [pdftex](http://www.tug.org/applications/pdftex/) will generate the file skills.pdf.
    
6.  If you would like to convert the PDF file to a JPEG file, you can do the following additional steps:

    ```
    $ pdfcrop --margins "30 10 30 10" skills.pdf skills-cropped.pdf
    $ convert -density 300 skills-cropped.pdf -quality 80 skills.jpg
    ```
    
    [pdfcrop](http://pdfcrop.sourceforge.net) trims the border around skills.pdf (i.e. reduces the page 
    size from 8.5x11 inches down to one which is just large enough to contain the chart image), and 
    [convert](http://www.imagemagick.org/script/convert.php) converts the PDF to a JPEG.  Both utilities 
    are bundled with the [MacTeX](http://www.tug.org/mactex/) distribution.
    
    The final result, skills.jpg:

    ![skills.jpg](doc/README/skills.jpg)



<br>
### Usage

```
$ tchart input-data-filename output-tikz-filename
```

input-data-filename is the name of a file containing one or more lines of date-based data, and
output-tikz-filename is the name of the a file where generated TikZ code should be written.  If
output-tikz-filename already exists, it will be silently overwritten.  Both file names must be
specified.

There are no restrictions on the file names other than those imposed by the operating system.
Although the examples here use .txt and .tikz as the extensions of the input and output files,
you can use any extensions you like (or none at all).

If errors are encountered, they will be written to standard error:

```
$ tchart
Usage: tchart input-data-filename output-tikz-filename

$ tchart unknown.txt skills.tikz
Error: input data file "unknown.txt" not found.

$ cat bad.txt
Objective-C	lang	2003-garbage
$ tchart bad.txt skills.tikz
bad.txt, 1: bad date range "2003-garbage"; expecting 2000.4.17-2001.7.21, or 2000.4-2001, etc.
Errors found; aborting.
```



<br>
### Data File Format


Input files consist of one or more lines, where each line can be a comment, a blank line, a data
line, a horizontal grid line, or a setting:

```
@include data-file-format.txt
```

![data-file-format.jpg](doc/README/data-file-format.jpg)


<br>
*Comments*

```
@include comments.txt
```

![comments.jpg](doc/README/comments.jpg)


<br>
*Blank Lines*

```
@include blank-lines.txt
```

![blank-lines.jpg](doc/README/blank-lines.jpg)


<br>
*Data Lines*

A data line represents something, a subject, that has a set of date ranges to be plotted on a row
on the chart.  For example, I may have written C++ programs from 2001 to 2003, and 2004 to 2007,
and I would like to plot this.  C++ is the subject of the row, and 2001 to 2003, and 2004 to 2007
are two date ranges that will appear as bars on the row.

A data line contains a description of the subject, which becomes the y-axis label on the chart,
a style that defines how to draw the date range bars (i.e. what colour and shape the bars should
be, etc.), and one or more date ranges.  Each of these elements is separated by a pipe character (|):

```
@include data-lines.txt
```

![data-lines.jpg](doc/README/data-lines.jpg)


<br>
*Data Line Labels*

Labels can contain spaces, although leading and trailing spaces are ignored:

```
@include data-lines-labels.txt
```

![data-lines-labels.jpg](doc/README/data-lines-labels.jpg)


The special characters # (starts a comment) and | (field separator) can be used in labels by escaping
them with a back slash (\).  Back slash can be used by escaping it with itself:

```
@include data-lines-escaping.txt
```

![data-lines-escaping.jpg](doc/README/data-lines-escaping.jpg)


<br>
*Data Line Styles*

The bar style is the name of a TikZ style that must be defined in the TeX document that contains
the generated TikZ chart code.  For example, we might have a file, chart.txt, that contains:

```
@include data-lines-styles.txt
```

The TeX document that includes the chart code must define the 'lang' and 'os' TikZ styles:

```
...

% Style for programming language chart bars.
\definecolor{lang_color}{rgb}{.10, .32, .68}
\tikzset{ lang/.style = {
  rounded corners = 1mm,
  line width = 0.1pt,
  draw = lang_color,
  top color = lang_color,
  bottom color = lang_color
}}

% Style for operating systems chart bars.
\definecolor{os_color}{rgb}{.35, .57, .93}
\tikzset{ os/.style = {
  rounded corners = 1mm,
  line width = 0.1pt,
  draw = os_color,
  top color = os_color,
  bottom color = os_color
}}

...

\input chart.tikz

...
```

![data-lines-styles.jpg](doc/README/data-lines-styles.jpg)

More information on TikZ styles can be found in [pgfmanual.pdf](http://mirrors.ctan.org/graphics/pgf/base/doc/generic/pgf/pgfmanual.pdf), in particular sections 2.8, 12.4.2, and 55.4.4.


<br>
*Data Line Dates*

Date ranges can be specified in various ways:

```
@include data-lines-dates.txt
```

![data-lines-dates.jpg](doc/README/data-lines-dates.jpg)

Dates are optional, which means that just the label will appear on the chart, and no bars.
If no dates are supplied, then the style can be omitted as well, although it will be ignored
if included:

```
@include data-lines-dates-optional.txt
``` 

![data-lines-dates-optional.jpg](doc/README/data-lines-dates-optional.jpg)


<br>
*Horizontal Grid Lines*

```
@include horizontal-grid-line.txt
```

![horizontal-grid-line.jpg](doc/README/horizontal-grid-line.jpg)


<br>
*Settings*

- used to adjust chart dimensions

Settings are of the form:

```
name = value
```

Spaces before and after 'name' and 'value' are ignored.  The following two lines are equivalent:

```
chart_width=164.99
  chart_width   =   164.99
```

  
<br>
### Version History

0.0.1 August 2013

- Initial construction.



<br>
### History

tchart was written to generate skill and employment history charts for the author's resume.



<br>
### Copyright Notices

[TeX](http://www.tug.org) is a typesetting system invented by Donald Knuth.

[PGF/TikZ](http://sourceforge.net/projects/pgf/) is a system designed by Till Tantau for producing graphics in TeX and related documents.

[Ruby](http://www.ruby-lang.org) is a programming language initially designed and developed by Yukihiro Matsumoto.

[OS X](http://www.apple.com/osx/) is a trademark of [Apple Inc.](http://www.apple.com)

All other company and/or product names may be the property of and/or trademarks of their respective owners.

